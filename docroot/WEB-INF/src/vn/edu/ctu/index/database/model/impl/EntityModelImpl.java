/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.edu.ctu.index.database.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.edu.ctu.index.database.model.Entity;
import vn.edu.ctu.index.database.model.EntityModel;
import vn.edu.ctu.index.database.model.EntitySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Entity service. Represents a row in the &quot;idxdb_Entity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.edu.ctu.index.database.model.EntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityImpl}.
 * </p>
 *
 * @author
 * @see EntityImpl
 * @see vn.edu.ctu.index.database.model.Entity
 * @see vn.edu.ctu.index.database.model.EntityModel
 * @generated
 */
@JSON(strict = true)
public class EntityModelImpl extends BaseModelImpl<Entity>
	implements EntityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a entity model instance should use the {@link vn.edu.ctu.index.database.model.Entity} interface instead.
	 */
	public static final String TABLE_NAME = "idxdb_Entity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "entityId", Types.BIGINT },
			{ "packagePath", Types.VARCHAR },
			{ "entityName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table idxdb_Entity (entityId LONG not null primary key,packagePath VARCHAR(75) null,entityName VARCHAR(300) null)";
	public static final String TABLE_SQL_DROP = "drop table idxdb_Entity";
	public static final String ORDER_BY_JPQL = " ORDER BY entity.entityId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY idxdb_Entity.entityId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.edu.ctu.index.database.model.Entity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.edu.ctu.index.database.model.Entity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.edu.ctu.index.database.model.Entity"),
			true);
	public static long ENTITYNAME_COLUMN_BITMASK = 1L;
	public static long ENTITYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Entity toModel(EntitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Entity model = new EntityImpl();

		model.setEntityId(soapModel.getEntityId());
		model.setPackagePath(soapModel.getPackagePath());
		model.setEntityName(soapModel.getEntityName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Entity> toModels(EntitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Entity> models = new ArrayList<Entity>(soapModels.length);

		for (EntitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.edu.ctu.index.database.model.Entity"));

	public EntityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Entity.class;
	}

	@Override
	public String getModelClassName() {
		return Entity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("entityId", getEntityId());
		attributes.put("packagePath", getPackagePath());
		attributes.put("entityName", getEntityName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		String packagePath = (String)attributes.get("packagePath");

		if (packagePath != null) {
			setPackagePath(packagePath);
		}

		String entityName = (String)attributes.get("entityName");

		if (entityName != null) {
			setEntityName(entityName);
		}
	}

	@JSON
	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_entityId = entityId;
	}

	@JSON
	@Override
	public String getPackagePath() {
		if (_packagePath == null) {
			return StringPool.BLANK;
		}
		else {
			return _packagePath;
		}
	}

	@Override
	public void setPackagePath(String packagePath) {
		_packagePath = packagePath;
	}

	@JSON
	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		_columnBitmask |= ENTITYNAME_COLUMN_BITMASK;

		if (_originalEntityName == null) {
			_originalEntityName = _entityName;
		}

		_entityName = entityName;
	}

	public String getOriginalEntityName() {
		return GetterUtil.getString(_originalEntityName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Entity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Entity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Entity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EntityImpl entityImpl = new EntityImpl();

		entityImpl.setEntityId(getEntityId());
		entityImpl.setPackagePath(getPackagePath());
		entityImpl.setEntityName(getEntityName());

		entityImpl.resetOriginalValues();

		return entityImpl;
	}

	@Override
	public int compareTo(Entity entity) {
		long primaryKey = entity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Entity)) {
			return false;
		}

		Entity entity = (Entity)obj;

		long primaryKey = entity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EntityModelImpl entityModelImpl = this;

		entityModelImpl._originalEntityName = entityModelImpl._entityName;

		entityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Entity> toCacheModel() {
		EntityCacheModel entityCacheModel = new EntityCacheModel();

		entityCacheModel.entityId = getEntityId();

		entityCacheModel.packagePath = getPackagePath();

		String packagePath = entityCacheModel.packagePath;

		if ((packagePath != null) && (packagePath.length() == 0)) {
			entityCacheModel.packagePath = null;
		}

		entityCacheModel.entityName = getEntityName();

		String entityName = entityCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			entityCacheModel.entityName = null;
		}

		return entityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{entityId=");
		sb.append(getEntityId());
		sb.append(", packagePath=");
		sb.append(getPackagePath());
		sb.append(", entityName=");
		sb.append(getEntityName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("vn.edu.ctu.index.database.model.Entity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>packagePath</column-name><column-value><![CDATA[");
		sb.append(getPackagePath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityName</column-name><column-value><![CDATA[");
		sb.append(getEntityName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Entity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Entity.class };
	private long _entityId;
	private String _packagePath;
	private String _entityName;
	private String _originalEntityName;
	private long _columnBitmask;
	private Entity _escapedModel;
}